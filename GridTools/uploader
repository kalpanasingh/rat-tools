#!/usr/bin/env python
#####################
#
# uploader
#
# For use to upload to the grid with
# correct file naming
#
# For uploading files
#
# Author: David Auty
#         <auty@ualberta.ca>
#
#####################

import os
import sys
import re
import numpy
try:
    import argparse
except:
    raise ImportError("argparse not available; python version needs to \
                      be 2.7+")
import grid
import database
import utilities

#####################################
# Code for uploading
#####################################


def get_runs():
    """Get a list of all labels available
        """
    rows = database.view("_design/dflow/_view/grid_ids", descending=True,
                         limit=1)
    for row in rows:
        max_run = row["key"][0]
    rows = database.view("_design/dflow/_view/grid_ids", descending=False,
                         limit=1)
    for row in rows:
        min_run = row["key"][0]
    try:
        return [min_run, max_run]
    except NameError, e:
        print "Problem finding min/max run range from database!"
        raise


def base_directory(directory):
    # check that one of the official base directories is used
    official_base = []
    for i, entry in enumerate(directory):
        if entry == 'user':
            official_base.append(True)
        elif entry == 'sw':
            official_base.append(True)
        elif entry == 'snotflow':
            official_base.append(True)
        elif entry == 'production_testing':
            official_base.append(True)
        elif entry == 'production':
            official_base.append(True)
        elif entry == 'nearline':
            official_base.append(True)
        else:
            official_base.append(False)
    return official_base


def grid_file(griddir, directory, path, filename, storage, out_file,
              remove, official_base):
    i = 0
    j = 0
    command = 'lcg-cr'
    gridid = []
    with open(out_file, "w") as f:
        for s in directory:
            if official_base[i] is True:
                se_path = os.path.join(directory[i], path[i], filename[i])
                se_path.strip()
                print se_path
                lfc_path = 'lfn:%s' % os.path.join(griddir, directory[i],
                                                   path[i], filename[i])
                print lfc_path
                upfile = filename[i]
                input_string = 'lcg-cr --vo snoplus.snolab.ca --checksum -d %s \
                    -P %s -l %s %s' % (storage, se_path, lfc_path, upfile)
                try:
                    gridid.append(os.popen(input_string).readlines()[0]
                                  )
                except:
                    if remove:
                        utilities.delete_file(lfc_path)
                        try:
                            gridid.append(os.popen(input_string).readlines()[0]
                                          )
                        except:
                            print "Can not overwrite file"
                            print upfile
                            continue
                        str8 = "Deleted old GRID file "
                        str9 = "and replaced with new file"
                        print '\033[1m' + str8 + str9 + '\033[0m'
                    else:
                        print '\033[1m' + "file already exists" \
                            + '\033[0m'
                        print upfile
                        i += 1
                        continue
                str1 = str(filename[i])
                str2 = str(os.stat(filename[i]).st_size)
                str3 = str(gridid[j].rstrip('\n'))
                str4 = str(utilities.get_adler32(filename[i]))
                str5 = str(lfc_path)
                outline = "%s \t %s \t %s \t %s \n" % (str3, str2, str4, str5)
                f.write(outline)
                j += 1
            else:
                str5 = str(directory[i])
                str6 = "is not an official base directory"
                str7 = "%s %s" % (str5, str6)
                print '\033[1m' + str7 + '\033[0m'
            i += 1
    f.close()
    return gridid


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-l", dest = 'list', help = "list of files to \
                        upload [in_text.txt]", default='in_text.txt')
    parser.add_argument("-o", dest = 'out', help = "text file produce \
                        with Grid information [Gridid.txt]", default =
                        'Gridid.txt')
    parser.add_argument("-d", dest = 'dest', help = "storage element on \
                        the GRID 'sehn02.atlas.ualberta.ca'", default =
                        'sehn02.atlas.ualberta.ca')
    parser.add_argument("-r", dest = 'remove', help = "if the file\
                        already exist should it be overwritten", default
                        = False)
    args = parser.parse_args()
    if not grid.proxy_time():
        print "Need to generate a grid proxy"
        if not grid.proxy_create():
            print "Proxy successfully created"
        else:
            str1 = "Unable to create proxy; try 'voms-proxy-init --voms"
            str2 = "snoplus.snolab.ca' in shell"
            str3 = "%s %s" % (str1, str2)
            print str3
            sys.exit()
    directory, path, filenamepath = utilities.readin_file(args.list)
    storage = args.dest
    filename = utilities.split_filename(filenamepath)
    true_base = base_directory(directory)
    out_text = args.out
    griddir = '/grid/snoplus.snolab.ca'
    gridid = grid_file(griddir, directory, path, filename, storage,
                       out_text, args.remove, true_base)
