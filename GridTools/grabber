#!/usr/bin/env python
#######################
#
# grabber:
#
# Script to get data from grid storage.
#
# Author: Matt Mottram
#         <m.mottram@sussex.ac.uk>
#
#######################

import os
import sys
import zlib
import argparse
import time
import multiprocessing

import grid
import utilities

_kB = 1024.
_MB = 1024. * _kB
_GB = 1024. * _MB

def warn(message):
    """Pipe to stderr; less typing for me.
    """
    sys.stderr.write("WARNING: %s\n" % message)


def download_file(directory, filename, guid, adler32, size):
    """Download a file to the given directory.
    """
    if not os.path.exists(directory):
        os.makedirs(directory)
    download_path = os.path.join(directory, filename)
    # Handle any files that have already been downloaded
    if os.path.exists(download_path):
        # Compare checksums
        local_adler32 = utilities.get_adler32(download_path)
        if adler32!="-99999" and local_adler32!=adler32:
            warn("Checksum mismatch: %s; delete and re-download" % filename)
            os.unlink(download_path)
        else:
            warn("Already downloaded: %s" % filename)
            return
    print "Downloading: %s" % filename
    # Set a timeout based on the file size
    # For lack of anything better, use 10 second for every MB + 60s basic
    if size==0:
        size = _GB # This is usually the max
    timeout = 60 + 10 * int(size / _MB)
    # Ensure correct guid format (some are missing prefix)
    if copy_type=="GUID" and not guid.startswith("guid:"):
        guid = "guid:" + guid
    try:
        grid.copy(guid, os.path.join(directory, filename), timeout=timeout)
    except Exception, e:
        warn("Download of %s failed: %s" % (filename, e))


def download_sequence(destination, files, guids, adlers, sizes):
    """Download the files in sequence mode; i.e. single threaded.
    """
    for i, f in enumerate(files):
        download_file(destination, f, guids[i], adlers[i], sizes[i])


def download_parallel(destination, files, guids, adlers, sizes, streams):
    """Download the files in parallel mode; i.e. (kinda) multi threaded.
    """
    pool = multiprocessing.Pool(processes=streams)
    result = []
    for i, f in enumerate(files):
        result.append(pool.apply_async(download_file, args=(destination, f, guids[i], adlers[i], sizes[i])))
    # Add in a hack for keyboard interrupts
    pool.close()
    complete = False
    while complete is False:
        # Downloads still running, wait for a bit.
        try:
            complete = True
            for i, r in enumerate(result):
                if r.ready() is False:
                    complete = False
            time.sleep(5)            
        except KeyboardInterrupt:
            # Kill all the daughters and exit
            pool.terminate()
            warn("Keyboard interrupt caught; terminating processes")
            complete = False
            break
    if complete is True:
        pool.join()


if __name__=="__main__":
    parser = argparse.ArgumentParser()   
    parser.add_argument("-l", dest="list", help="list of files to grab [filelist.dat]",
                        default="filelist.dat")
    parser.add_argument("-d", dest="dest", help="Directory to download files to. [downloaded]",
                        default="downloaded")
    parser.add_argument("-p", dest="parallel", help="Parallel downloads", action="store_true")
    parser.add_argument("--streams", dest="streams", help="Parallel streams [10]",
                        type=int, default=10)
    args = parser.parse_args()
    # First, check for a proxy
    if not grid.proxy_time():
        print "Need to generate a grid proxy"
        if not grid.proxy_create():
            print "Proxy successfully created"
        else:
            print "Unable to create proxy; try 'voms-proxy-init --voms snoplus.snolab.ca' in shell"
            sys.exit()
    # Now, check the downloads
    copy_type, files, sizes, guids, adlers = utilities.read_grabber_file(args.list)
    # Warn IF this is going to download lots of data (> 10 GB) or >25% of free space
    if not os.path.exists(args.dest):
        os.makedirs(args.dest)
    free_disk = os.statvfs(args.dest).f_frsize * os.statvfs(args.dest).f_bavail
    total_download = sum(sizes)
    if float(total_download) / free_disk > 1:
        print "Download: %s; total disk: %s" % (total_download, free_disk)
        sys.exit(1)
    if float(total_download)/_GB > 10 or float(total_download) / free_disk > 0.25e-10:
        response = raw_input("Will download %.1f GB, (free %s) OK? [y/N]: " % (total_download/_GB, 
                                                                               free_disk))
        if response!="y" and response!="Y":
            print "OK, quit!"
            sys.exit()
    # Now, download files   
    if args.parallel:
        download_parallel(args.dest, files, guids, adlers, sizes, args.streams)
    else:
        download_sequence(args.dest, files, guids, adlers, sizes)
    print "Downloads complete"
