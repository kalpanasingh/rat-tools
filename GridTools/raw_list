#!/usr/bin/env python
#####################
#
# raw_list
#
# Generates lists of raw data for download.
#
# Author: Matt Mottram
#         <m.mottram@sussex.ac.uk>
#
#####################

import os
import sys
import database
import grid
import utilities
try:
    import argparse
except:
    raise ImportError("argparse not available; python version needs to be 2.7+")
try:
    import json
except:
    raise ImportError("json not available; python version needs to be 2.7+")


# Copy type will be set to SURL if lcg-utils or gfal are not available
copy_type = "GUID"
server_list = []


def get_runs():
    """Get a list of all runs available
    """
    rows = database.view("_design/dflow/_view/grid_ids", descending=True,
                         limit=1)
    for row in rows:
        max_run = row["key"][0]
    rows = database.view("_design/dflow/_view/grid_ids", descending=False,
                         limit=1)
    for row in rows:
        min_run = row["key"][0]
    try:
        return [min_run, max_run]
    except NameError, e:
        print "Problem finding min/max run range from database!"
        raise


def generate_run_list(run_range, logfiles=False):
    """Generate the file list by run range
    """
    names = []
    sizes = []
    guids = []
    adlers = []
    rows = database.view("_design/dflow/_view/grid_ids", startkey=[run_range[0]],
                         endkey=[run_range[1]])
    for row in rows:
        if logfiles is True and row["key"][1]=="log":
            guid = row["value"][0]
            if guid==0:
                print row["value"][1], "missing GUID"
                continue
            guids.append(guid)
            names.append(row['value'][1])
            adlers.append(row["value"][2])
            sizes.append(row["value"][3])
        elif logfiles is False and row["key"][1]!="log":
            guid = row["value"][0]
            if guid==0:
                print row["value"][1], "missing GUID"
                continue
            guids.append(guid)
            names.append(row['value'][1])
            adlers.append(row["value"][2])
            sizes.append(row["value"][3])
    return names, sizes, guids, adlers


if __name__=="__main__":
    parser = argparse.ArgumentParser(description="File list generator.  Users MUST specify either a run range (-r)")
    parser.add_argument("-d", dest="db_name", help="Data-flow database name [data-processing]",
                        default="data-processing")
    parser.add_argument("-s", dest="db_server",
                        help="Data-flow database server [couch.snopl.us]",
                        default="couch.snopl.us")
    parser.add_argument("-p", dest="db_port",
                        help="Data-flow database server port [None]", default=None, type=int)
    parser.add_argument("-o", dest="output", help="Filename to write the list to [filelist.dat]",
                        default="filelist.dat")
    parser.add_argument("-l", dest="builder_logs", help="Get builder logs instead of data.",
                        action="store_true")
    
    parser.add_argument("-r", dest="run_range", help="Requested run range, format -r low high (blank for all)", type=int, nargs='+')
    
    parser.add_argument("--runs", dest="list_runs", help="Show possible run range", action="store_true")
    
    args = parser.parse_args()

    # First, check that no help commands are requested
    if args.list_runs:
        database.connect_db(args.db_server, args.db_port, args.db_name)
        runs = get_runs()
        print "Min run available:", runs[0]
        print "Max run available:", runs[1]
        sys.exit()

    # Need exactly two arguments for the run range
    if args.run_range:
        if len(args.run_range)!=2:
            print "Require two arguments for run range (lower upper)"
            parser.print_help()
            sys.exit()
    else:
        print "Must specify a run range (lower upper)"
        parser.print_help()
        sys.exit()

    # Check that the output file is OK
    if os.path.exists(args.output):
        overwrite = raw_input("%s exists, overwrite [y/N]?: " % args.output)
        if overwrite!="y" and overwrite!="Y":
            print "Specify another filename"
            sys.exit()

    # Connect to the database
    database.connect_db(args.db_server, args.db_port, args.db_name)

    # Generate the list of guids for the run range requested
    names, sizes, guids, adlers = generate_run_list(args.run_range, args.builder_logs)

    # And write the output file
    utilities.write_grabber_file(args.output, copy_type, names, sizes, guids, adlers)
    
