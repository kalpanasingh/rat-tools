#!/usr/bin/env python
#######################
#
# grabber:
#
# Script to get data from grid storage.
#
# Author: Matt Mottram
#         <m.mottram@sussex.ac.uk>
#
#######################

import os
import sys
import zlib
import argparse
import time
import multiprocessing

import grid

_kB = 1024.
_MB = 1024. * _kB
_GB = 1024. * _MB

adler32_block = 33554432
pow2_32 = 4294967296

def get_adler32(filename):
    """Get the adler32sum of a file.
    """
    val = 1
    f = open(filename, "rb")
    while True:
        line = f.read(adler32_block)
        if len(line) == 0:
            break
        val = zlib.adler32(line, val)
        if val < 0:
            val += pow2_32
    f.close()
    return hex(val)[2:10].zfill(8).lower()


def warn(message):
    """Pipe to stderr; less typing for me.
    """
    sys.stderr.write("WARNING: %s\n" % message)


def download_file(directory, filename, guid, adler32, size):
    """Download a file to the given directory.
    """
    if not os.path.exists(directory):
        os.makedirs(directory)
    download_path = os.path.join(directory, filename)
    # Handle any files that have already been downloaded
    if os.path.exists(download_path):
        # Compare checksums
        local_adler32 = get_adler32(download_path)
        if local_adler32!=adler32:
            warn("Checksum mismatch: %s; delete and re-download" % filename)
            os.unlink(download_path)
        else:
            warn("Already downloaded: %s" % filename)
            return
    print "Downloading: %s" % filename
    # Set a timeout based on the file size
    # For lack of anything better, use 1 second for every MB + 10s basic
    timeout = 10 + int(size / _MB)
    # Ensure correct guid format (some are missing prefix)
    if not guid.startswith("guid:"):
        guid = "guid:" + guid
    try:
        grid.copy(guid, os.path.join(directory, filename), timeout=timeout)
    except Exception, e:
        warn("Download of %s failed: %s" % (filename, e))


def download_sequence(destination, files, guids, adlers, sizes):
    """Download the files in sequence mode; i.e. single threaded.
    """
    for i, f in enumerate(files):
        download_file(destination, f, guids[i], adlers[i], sizes[i])


def download_parallel(destination, files, guids, adlers, sizes, streams):
    """Download the files in parallel mode; i.e. (kinda) multi threaded.
    """
    pool = multiprocessing.Pool(processes=streams)
    for i, f in enumerate(files):
        result = pool.apply_async(download_file, args=(destination, f, guids[i], adlers[i], sizes[i]))
    # Add in a hack for keyboard interrupts
    pool.close()
    complete = False
    while result.ready() is False:
        # Downloads still running, wait for a bit.
        try:
            time.sleep(5)            
        except KeyboardInterrupt:
            # Kill all the daughters and exit
            pool.terminate()
            warn("Keyboard interrupt caught; terminating processes")
            break
    if complete is True:
        pool.join()


if __name__=="__main__":
   parser = argparse.ArgumentParser()   
   parser.add_argument("-l", dest="list", help="list of files to grab [filelist.dat]",
                       default="filelist.dat")
   parser.add_argument("-d", dest="dest", help="Directory to download files to. [downloaded]",
                       default="downloaded")
   parser.add_argument("-p", dest="parallel", help="Parallel downloads", action="store_true")
   parser.add_argument("--streams", dest="streams", help="Parallel streams [10]",
                       type=int, default=10)
   args = parser.parse_args()
   # First, check for a proxy
   if not grid.proxy_time():
       print "Need to generate a grid proxy"
       sys.exit()
   # Now, check the downloads
   files = []
   sizes = []
   guids = []
   adlers = []
   fin = open(args.list, "r")
   for line in fin.readlines():
       f, s, g, a = line.split()
       files.append(f.strip())
       sizes.append(int(s.strip()))
       guids.append(g.strip())
       adlers.append(a.strip())
   response = raw_input("Will download %.1f GB, OK? [y/N]: " % (sum(sizes)/_GB))
   if response!="y" and response!="Y":
       print "OK, quit!"
       sys.exit()
   # Now, download files   
   if args.parallel:
       download_parallel(args.dest, files, guids, adlers, sizes, args.streams)
   else:
       download_sequence(args.dest, files, guids, adlers, sizes)
   print "Downloads complete"
